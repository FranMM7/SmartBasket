/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ShoppingListService } from "../shoppingList.service";
import { ShoppingListCreateInput } from "./ShoppingListCreateInput";
import { ShoppingList } from "./ShoppingList";
import { ShoppingListFindManyArgs } from "./ShoppingListFindManyArgs";
import { ShoppingListWhereUniqueInput } from "./ShoppingListWhereUniqueInput";
import { ShoppingListUpdateInput } from "./ShoppingListUpdateInput";

export class ShoppingListControllerBase {
  constructor(protected readonly service: ShoppingListService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ShoppingList })
  async createShoppingList(
    @common.Body() data: ShoppingListCreateInput
  ): Promise<ShoppingList> {
    return await this.service.createShoppingList({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ShoppingList] })
  @ApiNestedQuery(ShoppingListFindManyArgs)
  async shoppingLists(@common.Req() request: Request): Promise<ShoppingList[]> {
    const args = plainToClass(ShoppingListFindManyArgs, request.query);
    return this.service.shoppingLists({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ShoppingList })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async shoppingList(
    @common.Param() params: ShoppingListWhereUniqueInput
  ): Promise<ShoppingList | null> {
    const result = await this.service.shoppingList({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ShoppingList })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateShoppingList(
    @common.Param() params: ShoppingListWhereUniqueInput,
    @common.Body() data: ShoppingListUpdateInput
  ): Promise<ShoppingList | null> {
    try {
      return await this.service.updateShoppingList({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ShoppingList })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteShoppingList(
    @common.Param() params: ShoppingListWhereUniqueInput
  ): Promise<ShoppingList | null> {
    try {
      return await this.service.deleteShoppingList({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
