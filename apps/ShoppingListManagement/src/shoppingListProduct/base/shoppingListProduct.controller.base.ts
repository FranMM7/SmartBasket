/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ShoppingListProductService } from "../shoppingListProduct.service";
import { ShoppingListProductCreateInput } from "./ShoppingListProductCreateInput";
import { ShoppingListProduct } from "./ShoppingListProduct";
import { ShoppingListProductFindManyArgs } from "./ShoppingListProductFindManyArgs";
import { ShoppingListProductWhereUniqueInput } from "./ShoppingListProductWhereUniqueInput";
import { ShoppingListProductUpdateInput } from "./ShoppingListProductUpdateInput";

export class ShoppingListProductControllerBase {
  constructor(protected readonly service: ShoppingListProductService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ShoppingListProduct })
  async createShoppingListProduct(
    @common.Body() data: ShoppingListProductCreateInput
  ): Promise<ShoppingListProduct> {
    return await this.service.createShoppingListProduct({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ShoppingListProduct] })
  @ApiNestedQuery(ShoppingListProductFindManyArgs)
  async shoppingListProducts(
    @common.Req() request: Request
  ): Promise<ShoppingListProduct[]> {
    const args = plainToClass(ShoppingListProductFindManyArgs, request.query);
    return this.service.shoppingListProducts({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ShoppingListProduct })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async shoppingListProduct(
    @common.Param() params: ShoppingListProductWhereUniqueInput
  ): Promise<ShoppingListProduct | null> {
    const result = await this.service.shoppingListProduct({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ShoppingListProduct })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateShoppingListProduct(
    @common.Param() params: ShoppingListProductWhereUniqueInput,
    @common.Body() data: ShoppingListProductUpdateInput
  ): Promise<ShoppingListProduct | null> {
    try {
      return await this.service.updateShoppingListProduct({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ShoppingListProduct })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteShoppingListProduct(
    @common.Param() params: ShoppingListProductWhereUniqueInput
  ): Promise<ShoppingListProduct | null> {
    try {
      return await this.service.deleteShoppingListProduct({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
